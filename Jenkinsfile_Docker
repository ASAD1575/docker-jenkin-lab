pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID     = "375299695019"
        AWS_DEFAULT_REGION = "eu-north-1"
        IMAGE_REPO_NAME    = "ecs-fargate"
        IMAGE_TAG          = "latest"
        REPOSITORY_URI     = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        CLUSTER_NAME       = "node-app-cluster"    // must match your Terraform ECS cluster name
        SERVICE_NAME       = "node-app-service"    // must match your Terraform ECS service name
    }

    stages {
        stage('Install Terraform') {
            steps {
                script {
                    sh '''
                        curl -LO https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
                        unzip terraform_1.5.7_linux_amd64.zip
                        chmod +x terraform
                        mv terraform ./terraform-bin
                        export PATH=$PATH:$PWD
                        ./terraform -version
                    '''
                    }
                }
        }

        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }

        stage('Terraform Apply') {
            steps {
                sh 'terraform apply -auto-approve'
            }
        }

        stage('Get ECR Repository URI from Terraform') {
            steps {
                script {
                    env.REPOSITORY_URI = sh(
                        script: "terraform output -raw ecr_repository_uri",
                        returnStdout: true
                    ).trim()
                    echo "ECR URI: ${env.REPOSITORY_URI}"
                }
            }
        }

        stage('Login to ECR') {
            steps {
                sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
            }
        }

        stage('Clone Git') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        credentialsId: '',
                        url: 'https://github.com/ASAD1575/docker-jenkin-lab.git'
                    ]]
                ])
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                sh '''
                    docker build -t ${IMAGE_REPO_NAME}:${IMAGE_TAG} .
                    docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:${IMAGE_TAG}
                    docker push ${REPOSITORY_URI}:${IMAGE_TAG}
                '''
            }
        }

        stage('Wait for ECS Service to be Stable') {
            steps {
                sh 'aws ecs wait services-stable --cluster ${CLUSTER_NAME} --services ${SERVICE_NAME} --region ${AWS_DEFAULT_REGION}'
            }
        }

        stage('Get ECS Task Public IP') {
            steps {
                script {
                    def taskArn = sh(
                        script: "aws ecs list-tasks --cluster ${CLUSTER_NAME} --service-name ${SERVICE_NAME} --query 'taskArns[0]' --output text --region ${AWS_DEFAULT_REGION}",
                        returnStdout: true
                    ).trim()
                    
                    def eni = sh(
                        script: "aws ecs describe-tasks --cluster ${CLUSTER_NAME} --tasks ${taskArn} --query 'tasks[0].attachments[0].details[?name==\\`networkInterfaceId\\`].value' --output text --region ${AWS_DEFAULT_REGION}",
                        returnStdout: true
                    ).trim()
                    
                    def publicIp = sh(
                        script: "aws ec2 describe-network-interfaces --network-interface-ids ${eni} --query 'NetworkInterfaces[0].Association.PublicIp' --output text --region ${AWS_DEFAULT_REGION}",
                        returnStdout: true
                    ).trim()
                    
                    echo "Your ECS task is accessible at: http://${publicIp}:8080"
                }
            }
        }
    }
}
