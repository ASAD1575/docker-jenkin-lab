pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID     = "375299695019"
        AWS_DEFAULT_REGION = "eu-north-1"
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_ACCESS_KEY_ID  = credentials('AWS_ACCESS_KEY_ID')
        IMAGE_REPO_NAME    = "ecs-fargate"
        IMAGE_TAG          = "latest"
        REPOSITORY_URI     = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        CLUSTER_NAME       = "node-app-cluster"
        SERVICE_NAME       = "node-app-service"
    }
     
    stages {
        stage('Terraform Init & Apply') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--entrypoint="" -u root:root'
                }
            }
            steps {
                script {
                    sh '''
                        terraform init
                        terraform apply -auto-approve
                    '''
                    }
                
                }
        }

        stage('Get ECR Repository URI from Terraform') {
            agent {
                docker {
                    image 'hashicorp/terraform:1.5.7'
                    args '--entrypoint="" -u root:root'
                }
            }
            steps {
                sh '''
                    terraform output -raw ecr_repository_uri > ecr_uri.txt
                '''
                script {
                    env.REPOSITORY_URI = readFile('ecr_uri.txt').trim()
                    echo "ECR URI: ${env.REPOSITORY_URI}"
                }
            }
        }

        stage('Build & Push Docker Image') {
            agent {
                docker {
                    image 'amazon/aws-cli:2.15.0'
                    args '--entrypoint="" -u root:root -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:/workspace'
                }
            }
            steps {
                sh '''
                    cd /workspace
                    aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}
                    docker build -t ${IMAGE_REPO_NAME}:${IMAGE_TAG} .
                    docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:${IMAGE_TAG}
                    docker push ${REPOSITORY_URI}:${IMAGE_TAG}
                '''
            }
        }

        stage('Wait for ECS Service to be Stable') {
            agent {
                docker {
                    image 'amazon/aws-cli:2.15.0'
                    args '--entrypoint="" -u root:root'
                }
            }
            steps {
                sh "aws ecs wait services-stable --cluster ${CLUSTER_NAME} --services ${SERVICE_NAME} --region ${AWS_DEFAULT_REGION}"
            }
        }

        stage('Output ALB DNS Name') {
            steps {
                sh '''
                    terraform output -raw alb_dns_name > alb_dns.txt
                '''
                script {
                    def albDnsName = readFile('alb_dns.txt').trim()
                    echo "ALB DNS Name: ${albDnsName}"
                }
            }
        }
    }
}
